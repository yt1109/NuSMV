MODULE main
VAR
	trainA : {no_coal, has_coal, waiting, tunnel};
	trainB : {no_coal, has_coal, waiting, tunnel};
	trainC : {no_coal, has_coal, waiting, tunnel};
	controller : {a, b, c};
ASSIGN

	init(trainA) := no_coal;
	init(trainB) := no_coal;
	init(trainC) := no_coal;
	

	next(trainA) :=
			case
				trainA = no_coal 		: has_coal;
				trainA = has_coal 		: waiting;
				trainA = waiting 
					& controller = a	: tunnel;
				trainA = tunnel			: no_coal;
				TRUE				: trainA;
			esac;

	next(trainB) :=
			case
				trainB = no_coal 		: has_coal;
				trainB = has_coal 		: waiting;
				trainB = waiting 
					& controller = b	: tunnel;
				trainB = tunnel			: no_coal;
				TRUE				: trainB;
			esac;

	next(trainC) :=
			case
				trainC = no_coal 		: has_coal;
				trainC = has_coal 		: waiting;
				trainC = waiting 
					& controller = c	: tunnel;
				trainC = tunnel			: no_coal;
				TRUE				: trainC;
			esac;

	next(controller) :=
			case
				trainA = waiting 
					& !(trainB = tunnel)
					& !(trainC = tunnel)	: a;
				trainB = waiting
					& !(trainA = tunnel)	
					& !(trainC = tunnel)	: b;
				trainC = waiting
					& !(trainA = tunnel)
					& !(trainB = tunnel)	: c;
				TRUE				: controller;
			esac;

SPEC
	AG(!(trainA = tunnel & trainB = tunnel & trainC = tunnel))
SPEC
	AG(trainA = tunnel -> AF!(trainA = tunnel))	
SPEC
	AG(trainA = has_coal -> EF!(trainA = has_coal))
SPEC
	AF(trainA = tunnel)
SPEC
	AF(trainB = tunnel)
SPEC
	AG(EF(trainA = tunnel))		
