MODULE train_t(id, control_signal)
VAR
	state : {no_coal, has_coal, waiting, tunnel};
	request : boolean;
ASSIGN

	init(state) := no_coal;
	init(request) := FALSE;

	next(request) :=
			case
				state = waiting	: TRUE;
				TRUE			: FALSE;
			esac;

	next(state) :=
			case
				state = no_coal 			: has_coal;
				state = has_coal			: waiting;
				state = waiting
					& control_signal = id	: tunnel;
				state = tunnel				: no_coal;
				TRUE						: state;
			esac;


MODULE controller_t(requestA, requestB, requestC, tunnel_state)
VAR
	control_signal : {a, b, c};
ASSIGN
	next(control_signal) :=
			case
				!tunnel_state :
		 			case
						requestA	:
							case
								requestB	: 
							  		case
								  		requestC	: {a, b, c};
								  		TRUE		: {a, b};
									esac;
								requestC	: {a, c};
								TRUE		: a;					
							esac;
						requestB	:
							case
								requestA	: 
							  		case
								  		requestC	: {a, b, c};
								  		TRUE		: {a, b};
									esac;
								requestC	: {b, c};
								TRUE		: b;					
							esac;
						requestC	:
							case
								requestA	: 
							  		case
								  		requestB	: {a, b, c};
								  		TRUE		: {a, c};
									esac;
								requestB	: {b, c};
								TRUE		: c;					
							esac;
						TRUE		: control_signal;				
					esac;
			  TRUE		: control_signal;
			esac;			


MODULE main
VAR
	tunnel_state : boolean;
	trainA : train_t(a, controller.control_signal);
	trainB : train_t(b, controller.control_signal);
	trainC : train_t(c, controller.control_signal);
	controller : controller_t(trainA.request, trainB.request, trainC.request, tunnel_state);

ASSIGN

	init(tunnel_state) := FALSE;

			
	
	
	next(tunnel_state) :=
			case
				next(trainA.state = tunnel)
					| next(trainB.state = tunnel)
					| next(trainC.state = tunnel)	: TRUE;
				TRUE				 				: FALSE;
			esac;



SPEC
	AG(!(trainA.state = tunnel & trainB.state = tunnel & trainC.state = tunnel))
SPEC
	AG(trainA.state = tunnel -> AF!(trainA.state = tunnel))
SPEC
	AG(trainA.state = has_coal -> EF!(trainA.state = has_coal))
SPEC
	AF(trainA.state = tunnel)
SPEC
	AG(EF(trainA.state = tunnel))
